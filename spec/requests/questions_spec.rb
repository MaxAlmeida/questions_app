 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/questions", type: :request do
  # Question. As you add validations to Question, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  
  describe "GET /index" do
    let(:question_1){create(:question)}
    let(:question_2){create(:question)}
    let(:question_3){create(:question)}

    context 'when filtered by most week accessed' do
      let(:params){
        {
          q: {
            date_lteq: DateTime.now.end_of_week,
            date_gteq: DateTime.now.beginning_of_week
          }
        }
      }
      let!(:question_access_1){create(:question_access, question: question_1, date: DateTime.now , times_accessed: 100 )}
      let!(:question_access_2){create(:question_access, question: question_2, date: DateTime.now, times_accessed: 101 )}
      let!(:question_access_3){create(:question_access, question: question_3, date: DateTime.now, times_accessed: 102 )}

      before { get '/questions.json', params: params }

      it "return ordered by most week accessed" do
        expect(JSON.parse(response.body).pluck('id')).to match([question_3.id, question_2.id, question_1.id])
      end
    end

    context 'when filtered by most month accessed' do
      let(:params){
        {
          q: {
            date_lteq: DateTime.now.end_of_month,
            date_gteq: DateTime.now.beginning_of_month
          }
        }
      }
      let!(:question_access_1){create(:question_access, question: question_1, date: DateTime.now , times_accessed: 100 )}
      let!(:question_access_2){create(:question_access, question: question_2, date: DateTime.now, times_accessed: 101 )}
      let!(:question_access_3){create(:question_access, question: question_3, date: DateTime.now, times_accessed: 102 )}

      before { get '/questions.json', params: params }

      it "return ordered by most month accessed" do
        expect(JSON.parse(response.body).pluck('id')).to match([question_3.id, question_2.id, question_1.id])
      end
    end

    context 'when filtered by most year accessed' do
      let(:params){
        {
          q: {
            date_lteq: DateTime.now.end_of_year,
            date_gteq: DateTime.now.beginning_of_year
          }
        }
      }
      let!(:question_access_1){create(:question_access, question: question_1, date: 3.month.ago , times_accessed: 100 )}
      let!(:question_access_2){create(:question_access, question: question_2, date: 2.month.ago, times_accessed: 101 )}
      let!(:question_access_3){create(:question_access, question: question_3, date: 1.month.ago, times_accessed: 102 )}

      before { get '/questions.json', params: params }

      it "return ordered by most year accessed" do
        expect(JSON.parse(response.body).pluck('id')).to match([question_3.id, question_2.id, question_1.id])
      end
    end

    context 'when not filtered' do
      let!(:question_access_1){create(:question_access, question: question_1, date: 3.month.ago , times_accessed: 100 )}
      let!(:question_access_2){create(:question_access, question: question_2, date: 2.month.ago, times_accessed: 101 )}
      let!(:question_access_3){create(:question_access, question: question_3, date: 1.month.ago, times_accessed: 102 )}

      before { get '/questions.json'}

      it "return ordered by most year accessed" do
        expect(JSON.parse(response.body).pluck('id')).to match([question_3.id, question_2.id, question_1.id])
      end
    end
  end

  describe "GET /show" do
    let(:question){create(:question)}
    it "renders a successful response" do
      get question_url(question)
      expect(response).to be_successful
    end
  end
end
